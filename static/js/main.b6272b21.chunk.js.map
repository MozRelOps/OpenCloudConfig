{"version":3,"sources":["components/observations.js","App.js","serviceWorker.js","index.js"],"names":["Observations","observations","columns","dataField","text","sort","data","Object","keys","map","workerType","blob","time","task","runs","resolved","worker","workerId","forEach","key","includes","some","column","push","replace","keyField","bootstrap4","App","state","fetch","IndexApi","then","namespaceResponse","json","namespaceContainer","ArtifactApi","taskId","observationsResponse","setState","catch","console","log","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mTAiDeA,G,MA7CM,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAClBC,EAAU,CACZ,CACEC,UAAW,OACXC,KAAM,gBACNC,MAAM,GAER,CACEF,UAAW,SACXC,KAAM,cACNC,MAAM,GAER,CACEF,UAAW,aACXC,KAAM,cACNC,MAAM,IAGNC,EAAOC,OAAOC,KAAKP,GAAcQ,KAAI,SAAAC,GACvC,IAAIC,EAAO,CACTD,WAAYA,EACZE,KAAMX,EAAaS,GAAY,6BAA6B,eAAeG,KAAKC,KAAK,GAAGC,SACxFC,OAAQf,EAAaS,GAAY,6BAA6B,eAAeG,KAAKC,KAAK,GAAGG,UAc5F,OAZAV,OAAOC,KAAKP,EAAaS,GAAY,6BAA6B,gBAAgBQ,SAAQ,SAAAC,GACpFA,EAAIC,SAAS,cACfT,EAAKQ,GAAOlB,EAAaS,GAAY,6BAA6B,eAAeS,GAC3EjB,EAAQmB,MAAK,SAAAC,GAAM,OAAIA,EAAOnB,YAAcgB,MAChDjB,EAAQqB,KAAK,CACXpB,UAAWgB,EACXf,KAAMe,EAAIK,QAAQ,WAAY,IAAIA,QAAQ,SAAU,IAAIA,QAAQ,IAAK,KACrEnB,MAAM,QAKPM,KAET,OACE,6BACE,kBAAC,IAAD,CAAgBc,SAAS,aAAanB,KAAOA,EAAOJ,QAAUA,EAAUwB,YAAU,OCIzEC,G,kBAzBb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACX3B,aAAc,IAHJ,E,iFAMQ,IAAD,OACnB4B,MAAMC,kGACLC,MAAK,SAAAC,GAAiB,OAAIA,EAAkBC,UAC5CF,MAAK,SAAAG,GACJL,MAAMM,qCAAoBD,EAAmBE,OAAS,0BACrDL,MAAK,SAAAM,GAAoB,OAAIA,EAAqBJ,UAClDF,MAAK,SAAA9B,GACJ,EAAKqC,SAAS,CAAErC,aAAcA,OAE/BsC,MAAMC,QAAQC,QAChBF,MAAMC,QAAQC,O,+BAGf,OACE,kBAAC,EAAD,CAAcxC,aAAcyC,KAAKd,MAAM3B,mB,GArB3B0C,cCVEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,MAAK,SAAAyB,GACjCA,EAAaC,kB","file":"static/js/main.b6272b21.chunk.js","sourcesContent":["import React from 'react'\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\n\nconst Observations = ({ observations }) => {\n  var columns = [\n    {\n      dataField: 'time',\n      text: 'last observed',\n      sort: true\n    },\n    {\n      dataField: 'worker',\n      text: 'observed on',\n      sort: true\n    },\n    {\n      dataField: 'workerType',\n      text: 'worker type',\n      sort: true\n    }\n  ];\n  let data = Object.keys(observations).map(workerType => {\n    let blob = {\n      workerType: workerType,\n      time: observations[workerType]['collect-software-versions']['iteration-1'].task.runs[0].resolved,\n      worker: observations[workerType]['collect-software-versions']['iteration-1'].task.runs[0].workerId\n    };\n    Object.keys(observations[workerType]['collect-software-versions']['iteration-1']).forEach(key => {\n      if (key.includes('-version')) {\n        blob[key] = observations[workerType]['collect-software-versions']['iteration-1'][key];\n        if (!(columns.some(column => column.dataField === key))) {\n          columns.push({\n            dataField: key,\n            text: key.replace('-version', '').replace('-major', '').replace('-', ' '),\n            sort: true\n          });\n        }\n      }\n    });\n    return blob;\n  });\n  return (\n    <div>\n      <BootstrapTable keyField='workerType' data={ data } columns={ columns } bootstrap4 />\n    </div>\n  )\n};\n\nexport default Observations","import React, { Component } from 'react'\nimport Observations from './components/observations';\nimport './App.css';\n\nconst IndexApi = 'https://index.taskcluster.net/v1';\n//const QueueApi = 'https://queue.taskcluster.net/v1';\nconst ArtifactApi = 'https://taskcluster-artifacts.net';\nconst RootNamespace = 'project.releng.a2ff8966607583fbc1944fccc256a80c';\n/*\nconst versionregex = {\n  'windows-version': /(\\d+\\.\\d+\\.\\d+)/gm,\n  'python2-version': /(\\d+\\.\\d+\\.\\d+)/gm,\n  'python3-version': /(\\d+\\.\\d+\\.\\d+)/gm,\n  'python2-platform-release': /(.*)/gm,\n  'python3-platform-release': /(.*)/gm,\n  'wget-version': /(\\d+\\.\\d+\\.\\d+)/gm,\n  'hg-version': /(\\d+\\.\\d+\\.\\d+)/gm,\n  'generic-worker-version': /(\\d+\\.\\d+\\.\\d+)/gm,\n  'servicepack-major-version': /\\d/g,\n}\n*/\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      observations: {}\n    };\n  }\n  componentDidMount () {\n    fetch(IndexApi + '/task/' + RootNamespace + '.decision')\n    .then(namespaceResponse => namespaceResponse.json())\n    .then(namespaceContainer => {\n      fetch(ArtifactApi + '/' + namespaceContainer.taskId + '/0/public/results.json')\n      .then(observationsResponse => observationsResponse.json())\n      .then(observations => {\n        this.setState({ observations: observations });\n      })\n      .catch(console.log)})\n    .catch(console.log)\n  };\n  render() {\n    return (\n      <Observations observations={this.state.observations} />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}