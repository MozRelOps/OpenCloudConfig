{"version":3,"sources":["components/workerPools.js","App.js","serviceWorker.js","index.js"],"names":["WorkerPools","workerPools","map","workerPool","key","namespace","name","href","task","taskGroupId","id","observations","observation","value","IndexApi","versionregex","App","state","fetch","then","response","json","containerPrimary","namespaces","ns1","containerSecondary","forEach","ns2","a","responseTask","containerTask","taskId","catch","console","log","QueueApi","payload","artifacts","artifact","split","pop","replace","ArtifactApi","path","text","match","push","setState","currentState","this","Component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4TA4BeA,EAzBK,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACrB,OACE,6BACE,4BAEIA,EAAYC,KAAI,SAACC,GAAD,OACd,wBAAIC,IAAKD,EAAWE,WACjBF,EAAWG,KADd,4BAC4C,uBAAGC,KAAM,wCAA0CJ,EAAWK,KAAKC,YAAc,UAAYN,EAAWK,KAAKE,GAAK,YAAaP,EAAWK,KAAKE,IAD3L,KAEE,4BAEIP,EAAWQ,aAAaT,KAAI,SAACU,GAAD,OAC1B,wBAAIR,IAAKQ,EAAYN,MAClBM,EAAYN,KADf,KACuBM,EAAYC,kBCXjDC,G,MAAW,oCAIXC,EAAe,CACnB,kBAAmB,oBACnB,kBAAmB,oBACnB,kBAAmB,oBACnB,2BAA4B,SAC5B,2BAA4B,SAC5B,eAAgB,oBAChB,aAAc,oBACd,yBAA0B,oBAC1B,4BAA6B,OAoDhBC,E,YAhDb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXhB,YAAa,IAHH,E,iFAMQ,IAAD,OACnBiB,MAAMJ,EAAW,+DAChBK,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAACG,GACLA,EAAiBC,WAAWrB,KAAI,SAACsB,GAAD,OAC9BN,MAAMJ,EAAW,eAAiBU,EAAInB,WACrCc,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAACM,GACLA,EAAmBF,WAAWG,QAA9B,uCAAsC,WAAOC,GAAP,mBAAAC,EAAA,sEACjBV,MAAMJ,EAAW,SAAWa,EAAItB,UAAY,8BAA8Bc,MAAK,SAAAU,GAAY,OAAIA,EAAaR,UAAQF,MAAK,SAAAW,GAAa,OAAIA,EAAcC,UAAQC,MAAMC,QAAQC,KAD7J,cAChCH,EADgC,gBAEnBb,MAAMiB,yCAAsBJ,GAAQZ,MAAK,SAAAU,GAAY,OAAIA,EAAaR,UAAQW,MAAMC,QAAQC,KAFzE,QAEhC1B,EAFgC,QAG/BE,GAAKqB,EACN5B,EAAa,CACfG,KAAMkB,EAAIlB,KAAO,IAAMqB,EAAIrB,KAC3BD,UAAWsB,EAAItB,UACfG,KAAMA,EACNG,aAAc,IAEhBH,EAAK4B,QAAQC,UAAUX,QAAvB,uCAA+B,WAAMY,GAAN,SAAAV,EAAA,kEAC7BzB,EAAWQ,aADkB,KAErB2B,EAAShC,KAAKiC,MAAM,KAAKC,MAAMC,QAAQ,OAAQ,IAF1B,SAGbvB,MAAMwB,qCAAoBX,EAAS,MAAQO,EAASK,MAAMxB,MAAK,SAAAU,GAAY,OAAIA,EAAae,UAAQZ,MAAMC,QAAQC,KAHrG,YAGiHnB,EAAauB,EAAShC,KAAKiC,MAAM,KAAKC,MAAMC,QAAQ,OAAQ,KAH7K,YAG2GI,MAH3G,YAE3BvC,KAF2B,KAG3BO,MAH2B,WACLiC,KADK,2DAA/B,uDAMA,EAAKC,UAAS,SAAAC,GAAY,MAAK,CAC7B/C,YAAY,GAAD,mBAAM+C,EAAa/C,aAAnB,CAAgCE,QAjBT,4CAAtC,0DAsBD6B,MAAMC,QAAQC,WAGlBF,MAAMC,QAAQC,O,+BAGf,OACE,kBAAC,EAAD,CAAajC,YAAagD,KAAKhC,MAAMhB,kB,GA5CzBiD,aCREC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAST,MACvB,2DCZNU,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1C,MAAK,SAAA2C,GACjCA,EAAaC,kB","file":"static/js/main.a3c29b91.chunk.js","sourcesContent":["import React from 'react'\n\n\nconst WorkerPools = ({ workerPools }) => {\n  return (\n    <div>\n      <ul>\n        {\n          workerPools.map((workerPool) => (\n            <li key={workerPool.namespace}>\n              {workerPool.name} (observations from task <a href={'https://tools.taskcluster.net/groups/' + workerPool.task.taskGroupId + '/tasks/' + workerPool.task.id + '/details'}>{workerPool.task.id}</a>):\n              <ul>\n                {\n                  workerPool.observations.map((observation) => (\n                    <li key={observation.name}>\n                      {observation.name}: {observation.value}\n                    </li>\n                  ))\n                }\n              </ul>\n            </li>\n          ))\n        }\n      </ul>\n    </div>\n  )\n};\n\nexport default WorkerPools","import React, { Component } from 'react'\nimport WorkerPools from './components/workerPools';\nimport './App.css';\n\nconst IndexApi = 'https://index.taskcluster.net/v1';\nconst QueueApi = 'https://queue.taskcluster.net/v1';\nconst ArtifactApi = 'https://taskcluster-artifacts.net';\nconst RootNamespace = 'project.releng.a2ff8966607583fbc1944fccc256a80c';\nconst versionregex = {\n  'windows-version': /(\\d+\\.\\d+\\.\\d+)/gm,\n  'python2-version': /(\\d+\\.\\d+\\.\\d+)/gm,\n  'python3-version': /(\\d+\\.\\d+\\.\\d+)/gm,\n  'python2-platform-release': /(.*)/gm,\n  'python3-platform-release': /(.*)/gm,\n  'wget-version': /(\\d+\\.\\d+\\.\\d+)/gm,\n  'hg-version': /(\\d+\\.\\d+\\.\\d+)/gm,\n  'generic-worker-version': /(\\d+\\.\\d+\\.\\d+)/gm,\n  'servicepack-major-version': /\\d/g,\n}\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      workerPools: []\n    };\n  }\n  componentDidMount () {\n    fetch(IndexApi + '/namespaces/' + RootNamespace)\n    .then(response => response.json())\n    .then((containerPrimary) => {\n      containerPrimary.namespaces.map((ns1) => (\n        fetch(IndexApi + '/namespaces/' + ns1.namespace)\n        .then(response => response.json())\n        .then((containerSecondary) => {\n          containerSecondary.namespaces.forEach(async (ns2) => {\n            let taskId = await fetch(IndexApi + '/task/' + ns2.namespace + '.collect-software-versions').then(responseTask => responseTask.json()).then(containerTask => containerTask.taskId).catch(console.log);\n            let task = await fetch(QueueApi + '/task/' + taskId).then(responseTask => responseTask.json()).catch(console.log);\n            task.id = taskId;\n            let workerPool = {\n              name: ns1.name + '/' + ns2.name,\n              namespace: ns2.namespace,\n              task: task,\n              observations: []\n            };\n            task.payload.artifacts.forEach(async artifact => {\n              workerPool.observations.push({\n                name: artifact.name.split('/').pop().replace('.txt', ''),\n                value: (await fetch(ArtifactApi + '/' + taskId + '/0/' + artifact.path).then(responseTask => responseTask.text()).catch(console.log)).match(versionregex[artifact.name.split('/').pop().replace('.txt', '')])\n              });\n            });\n            this.setState(currentState => ({\n              workerPools: [...currentState.workerPools, workerPool]\n            }));\n          });\n\n        })\n        .catch(console.log)\n      ));\n    })\n    .catch(console.log);\n  };\n  render() {\n    return (\n      <WorkerPools workerPools={this.state.workerPools} />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}